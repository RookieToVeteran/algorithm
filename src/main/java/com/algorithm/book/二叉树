二叉树（binary tree）是指树中节点的度不大于2的有序树，它是一种最简单且最重要的树。
二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树 。


遍历是对树的一种最基本的运算，所谓遍历二叉树，就是按一定的规则和顺序走遍二叉树的所有结点，使每一个结点都被访问一次，而且只被访问一次。
由于二叉树是非线性结构，因此，树的遍历实质上是将二叉树的各个结点转换成为一个线性序列来表示

二叉树的分类：
1）、完全二叉树
在一棵二叉树中，除了最后一层，都是满的，并且最后一层或者是满的，或者是右边缺少连续若干节点，成为完全二叉树


2）、满二叉树
一棵深度为k，并且有 2^{k+1}-1个节点的二叉树，成为满二叉树

3）、二叉查找树(Binary Search Tree)
又称为二叉搜索树，排序二叉树，可为空树，或节点满足左子树所有节点<跟节点<右子树所以节点，不存在相等值的节点

4）、平衡二叉树（Balanced Binary Tree）
是一种结构平衡的二叉搜索树，即叶子节点深度差不超过1，能够在O(logn)内完成插入、查找和删除操作。常见的平衡二叉树有AVl树、红黑树等

5）、AVL树
又被称为高度平衡树，是最先发明的自平衡二叉查找树，任何节点的两个儿子子树的高度最大差别为1，增加和删除可能需要通过一次或多次树旋转来重新平衡这个树

6）、红黑树（Red-black tree）
是一种自平衡二叉查找树，又称为“对称二叉B树”，除了满足所有二叉查找树的要求之外还需要满足以下要求：

（1）节点是红色或者是黑色的

（2）跟节点是黑色的

（3）每个叶子节点都是黑色的（叶子是NIL节点）

（4）每个红色节点必须有两个黑色节点（从叶子到根节点的所有简单路径上不可能有两个连续的红色节点）

（5）从任一节点到其每个叶子的所有简单路径都饱和相同数目的节点

3、二叉树的性质：


红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。
红黑树是在1972年由Rudolf Bayer发明的，当时被称为平衡二叉B树（symmetric binary B-trees）。后来，在1978年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。 [2]
红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。

红黑树是一种特定类型的二叉树，它是在计算机科学中用来组织数据比如数字的块的一种结构。若一棵二叉查找树是红黑树，则它的任一子树必为红黑树. [4]
红黑树是一种平衡二叉查找树的变体，它的左右子树高差有可能大于 1，所以红黑树不是严格意义上的平衡二叉树（AVL），但 对之进行平衡的代价较低， 其平均统计性能要强于 AVL 。 [2]
由于每一颗红黑树都是一颗二叉排序树，因此，在对红黑树进行查找时，可以采用运用于普通二叉排序树上的查找算法，在查找过程中不需要颜色信息